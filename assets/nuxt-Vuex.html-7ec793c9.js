import{_ as e,r as p,o,c,a as n,b as s,d as t,e as i}from"./app-6fcf50f1.js";const l={},u=i(`<h1 id="vuex持久化" tabindex="-1"><a class="header-anchor" href="#vuex持久化" aria-hidden="true">#</a> vueX持久化</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言：</h2><p>vuex-persist相比vuex-persistedstate，vuex-persist是基于ts的，据说ie和微信会报错。</p><p>我nuxt项目的持久化主要是用于存储用户的登录状态。</p><p>一开始用vuex-persist，刷新网页vuex的数据确实保存了下来，但是会有一个很明显的数据转换的过程：比如1变成2。</p><p>但是打包部署后，生产环境刷新就没有这个问题，这时开发环境这个问题也消失了.....</p><p>过了没一天，发现这个问题又出现了，所以又去尝试了其他方案，最好的办法是<strong>cookie-universal-nuxt + nuxtServerInit</strong></p><h2 id="方案一-vuex-persist-不好" tabindex="-1"><a class="header-anchor" href="#方案一-vuex-persist-不好" aria-hidden="true">#</a> 方案一：vuex-persist（不好）</h2><p>安装插件--vuex-persist</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add vuex-persist@3.1.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建插件<strong>persist.js</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> VuexPersistence <span class="token keyword">from</span> <span class="token string">&#39;vuex-persist&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    
	window<span class="token punctuation">.</span><span class="token function">onNuxtReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        
		<span class="token keyword">new</span> <span class="token class-name">VuexPersistence</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           
			 <span class="token comment">/* your options */</span>        
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>    
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置<strong>nuxt.config.js</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&#39;~/plugins/persist&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">ssr</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后修改你的vuex文件，<strong>/store/test.js</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> VuexPersistence <span class="token keyword">from</span> <span class="token string">&#39;vuex-persist&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">setA</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>a
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">plugins</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VuexPersistence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plugin<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成，刷新实验效果。</p><p>如果发现刷新后效果还是有明显的变化痕迹：1——&gt;2，就尝试多次npm run build后，重启项目几次，稍等一会就发现没有变化痕迹了。</p><p>有时候变化又回来了....</p><p>这个方案只能解决数据持久化的问题，而且也并不是很完美，变化过程飘忽不定的，如果这个对项目不影响就可用。</p><p>在asyncData里做权限校验，由于是url直接跳转或网页刷新是服务端渲染，请求里就没有携带token，要想服务端渲染也拿到token，得配合cookie。</p><h2 id="方案二-js-cookie-nuxtserverinit" tabindex="-1"><a class="header-anchor" href="#方案二-js-cookie-nuxtserverinit" aria-hidden="true">#</a> 方案二：js-cookie+nuxtServerInit</h2><p>Nuxt调用nuxtServerInit的时候会将页面的context上下文对象作为第2个参数传给它（服务端调用），与fetch一样，不包括context.redirect和context.error方法，当我们想要将服务端的一些数据传到客户端，可以通过这个获取保存在状态中，客户端再从状态里取。</p><p>安装js-cookie</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add js-cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>必须在store下的index.js中nuxtServerInit才会执行。</p><p>store/index.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">export</span> <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">nuxtServerInit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//如果需要全部vuex的值都需要持久化存储，则需要通过store.state进行遍历操作了.目前只需要存储一个登录状态值</span>
      <span class="token comment">//context对象为nuxtServerInit的第二个参数</span>
      <span class="token comment">//console.log(&#39;$&#39;, store.state);</span>
    
      <span class="token comment">// 切分Cookie,从中获取持久化存储的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> req <span class="token operator">!=</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>headers <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> cookie <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 定义字符常量：需要从cookie中取出的值的名称</span>
      <span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token string">&#39;cookie_isLogin=&#39;</span>

      <span class="token comment">// 需要持久化的值</span>
      <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
      <span class="token comment">// 遍历Cookie，取得需要的值</span>
      cookie<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> header<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          text <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// 提交mutation来修改值</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;login/setLogin&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>store/login.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Cookies <span class="token keyword">from</span> <span class="token string">&quot;js-cookie&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// export</span>
<span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">isLogin</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// export </span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//在文件中调用this.$store.commit(&#39;login/setLogin&#39;,xxx)的时候就能写入cookie。但是仅客户端写入有效</span>
  <span class="token function">setLogin</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> data <span class="token operator">==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//只有在客户端渲染的时候cookie的set和remove才有效，所以校验失败的登录cookie清除得交给后端处理</span>
          <span class="token comment">//这里还不能设置maxAge，好像只有expires</span>
        Cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;cookie_isLogin&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">,</span> mutations
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一次服务端渲染都会执行nuxtServerInit函数。</p><p>我一开始是打算vuex存储用户登录状态，所以存储到cookie，使网页刷新后也能读取到原本的登录状态值。</p><p>因为刷新页面后是服务端渲染，会执行nuxtServerInit来获取到isLogin为true的值，从而把网页转换至登录状态。但是后面我测试发现，当cookie的错误校验错误后，isLogin的cookie值并不能被清除或修改掉（后端返回cookie清除也没有效果），因为这是服务端渲染，cookie并不能操作到浏览器上。而我每一个页面都有这个登录状态值所决定的样式，就需要把一个额外的校验登录请求写到nuxtServerInit里。直接根据请求的返回结果来修改状态，那这就连js-cookie都省了。</p><p>fetch函数其实也可以在页面渲染前操作store数据，而nuxtServerInit更适用于多页面都使用的情况。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">nuxtServerInit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> $axios<span class="token punctuation">,</span> $port <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> check <span class="token operator">=</span> <span class="token keyword">await</span> $axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>$port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/checkLogin</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result <span class="token operator">==</span> <span class="token string">&#39;tokenFailed&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;login/setLogin&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;login/setLogin&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案三-cookie-universal-nuxt" tabindex="-1"><a class="header-anchor" href="#方案三-cookie-universal-nuxt" aria-hidden="true">#</a> 方案三：cookie-universal-nuxt</h2><p>cookie-universal-nuxt主要是用于替换js-cookie原本的操作。</p><p>因为js-cookie在服务端渲染的时候，无论是set，还是remove都无法对浏览器的cookie进行操作。</p><p>而cookie-universal-nuxt在服务端渲染的时候可以设置或清除。</p><p>使用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add cookie-universal-nuxt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nuxt.config.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;cookie-universal-nuxt&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>$cookies就会注入到context对象中，在vue文件中也可以通过this.$cookies进行调用。用于替换原本js-cookie的操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">nuxtServerInit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> $axios<span class="token punctuation">,</span> $port<span class="token punctuation">,</span> $cookies <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> check <span class="token operator">=</span> <span class="token keyword">await</span> $axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>$port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/checkLogin</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// check.headers[&#39;set-cookie&#39;],这个是服务端渲染时，获取接口返回的cookie。因为服务端渲染时，看不到真正的请求，就无法获取接口返回的cookie。只能通过这种方式获取</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result <span class="token operator">==</span> <span class="token string">&#39;tokenFailed&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>$cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;twice_token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果是原本有token的，说明才校验失败</span>
        $cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;showError&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      $cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;twice_token&#39;</span><span class="token punctuation">)</span>
      $cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;cookie_isLogin&#39;</span><span class="token punctuation">)</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;login/setLogin&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;login/setLogin&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作api：https://www.npmjs.com/package/cookie-universal-nuxt</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              <span class="token comment">//cookieArray</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;cookie-name1&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> 
     <span class="token literal-property property">opts</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多模块：</p>`,48),r={href:"https://modules.nuxtjs.org/?category=UI",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"参考博客",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考博客","aria-hidden":"true"},"#"),s(" 参考博客：")],-1),d={href:"https://blog.csdn.net/qq_30871771/article/details/115250630",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/Tomwildboar/article/details/97616705?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-1&spm=1001.2101.3001.4242",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("nuxt官方模块，用谷歌浏览器打开"),t(a)])]),k,n("p",null,[n("a",d,[s("Nuxt.js中让vuex数据持久化，实测管用"),t(a)])]),n("p",null,[n("a",v,[s("nuxt刷新页面Vuex失效，在axios中使用vuex【vuex-persist，localStorage，Cookie。三种办法解决】"),t(a)])])])}const h=e(l,[["render",m],["__file","nuxt-Vuex.html.vue"]]);export{h as default};
