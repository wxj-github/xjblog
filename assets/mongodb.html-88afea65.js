import{_ as n,o as s,c as a,e as p}from"./app-bb14e2a6.js";const t={},e=p(`<p>MongoDb是基于分布式文件存储的数据库。</p><p>文档：http://www.mongoosejs.net/docs/index.html</p><p>选择MongoDb的理由：操作语法与JavaScript类似、容易上手</p><p>https://www.mongodb.com/try/download/community</p><p>安装选择custom，一路next，然后注意左下角的install mongodb compass，把勾取消</p><p>mongodb6.0以后已经不再默认为你安装shell工具，因此需要安装一个额外的shell。6.0之前的版本就会有mongo.exe客户端,6.0之后只有mongod.exe和mongos.exe</p><p>https://www.mongodb.com/docs/mongodb-shell/install/</p><p>解压文件夹到mongodb bin文件夹同级目录，再去配置mongosh的环境变量</p><p>要先在C盘创建data文件夹，再在里面创建db文件夹,mongodb会默认把数据存储在这个文件夹里</p><p>再cmd执行mongod命令，无法运行就去配置环境变量</p><p>看到waiting for connections表示mongodb服务运行成功.<strong>注意点：不要选中服务窗口的内容，会暂停服务，可以按回车取消选中</strong></p><p>再cmd执行mongosh。</p><p><strong>客户端命令：</strong></p><p>show dbs //查看所有数据库</p><p>use 数据库名 //切换到指定数据库，不存在会自动创建</p><p>db //显示当前数据库</p><p>db.dropDatabase() //删除当前数据库</p><p>db.createCollection(&#39;users&#39;) //创建集合users(表)</p><p>show collections //显示当前数据库所有集合</p><p>db.集合名.drop() //删除某个集合</p><p>db.集合名.renameCollection(&#39;newname&#39;)</p><p><strong>客户端文档(表)命令：</strong></p><p>db.集合名.insert(文档对象) 插入</p><p>db.集合名.find(查询条件) _id是mongodb自动生成的唯一编号，用来唯一标识文档</p><p>db.集合名.update(查询条件，新的文档) //默认是整个覆盖</p><p>db.集合名.update( { name:&#39;张三&#39; }，{ $set: { age:19 } }) //$set局部更新</p><p>db.集合名.remove(查询条件)</p><h3 id="mongoose" tabindex="-1"><a class="header-anchor" href="#mongoose" aria-hidden="true">#</a> mongoose</h3><p>mongoose是一个文档对象模型库，方便用代码操作mongodb</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i mongoose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://127.0.0.1:27017/数据库名&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//端口号默认27017，不写也行.数据库不存在会自动创建</span>
mongoose<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   <span class="token comment">//设置连接成功的回调,推荐用.once进行绑定,事件回调函数只执行一次</span>
    <span class="token comment">//创建文档的解构对象</span>
    <span class="token comment">//设置集合里文档的属性及属性值的约束</span>
    <span class="token keyword">let</span> bookSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
        <span class="token literal-property property">author</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
        <span class="token literal-property property">price</span><span class="token operator">:</span>Number
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token comment">//创建模型对象(对文档操作的封装对象)，第一个参数为操作的集合名，第二个为上面创建的结构对象</span>
    <span class="token keyword">let</span> bookModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span>bookSchema<span class="token punctuation">)</span>  <span class="token comment">//mongoose会使用集合名称的复数去创建</span>
    
    bookModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;西游记&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">author</span><span class="token operator">:</span><span class="token string">&#39;吴承恩&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">10</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>   
mongoose<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//设置连接失败的回调</span>
mongoose<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//设置连接关闭的回调</span>

<span class="token comment">//mongoose.disconnect() //关闭连接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字段类型" tabindex="-1"><a class="header-anchor" href="#字段类型" aria-hidden="true">#</a> 字段类型：</h3><p>String 字符串</p><p>Number 数字</p><p>Boolean 布尔值</p><p>Array 数组，也可以使用[ ]来标识</p><p>Date 日期</p><p>Buffer Buffer对象</p><p>Mixed 任意类型，需要使用mongoose.Schema.Types.Mixed指定</p><p>ObjectId 对象Id，需要使用mongoose.Schema.Types.ObjectId指定，一般用于存储外键</p><p>Decimal128 高精度数字，需要使用mongoose.Schema.Types.Decimal128指定</p><h3 id="字段校验" tabindex="-1"><a class="header-anchor" href="#字段校验" aria-hidden="true">#</a> 字段校验：</h3><p>自定义校验等去官网查看</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//必填项</span>
<span class="token literal-property property">title</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">//默认值</span>
<span class="token literal-property property">author</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&#39;匿名&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">//枚举值</span>
<span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
    <span class="token keyword">enum</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">]</span>   <span class="token comment">//设置的值必须是数组中的</span>
<span class="token punctuation">}</span>

<span class="token comment">//唯一值</span>
<span class="token literal-property property">username</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
    <span class="token literal-property property">unique</span><span class="token operator">:</span><span class="token boolean">true</span>		<span class="token comment">//unique需要重建集合（删除整个文档，重启服务）才能有效果,unique是索引，不是校验器</span>
    				<span class="token comment">//感觉不是很好用，了解即可</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增删查改" tabindex="-1"><a class="header-anchor" href="#增删查改" aria-hidden="true">#</a> 增删查改：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> bookSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
     <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token comment">//启用该配置项，新增数据时会自动创建createAt和updateAt字段,</span>
    <span class="token comment">//还有一个__v字段，记录版本号，可配置versionKey: false</span>
    <span class="token comment">//不带optimisticConcurrency: true选项。‘__v’没有任何影响。而 Mongoose 不会将其增加1。</span>
    <span class="token comment">//注意：在‘findOneAndUpdate’类操作中，不会更新‘__v’。(仅限save()更新)</span>
     <span class="token comment">//下面这种写法是自定义这两个字段名</span>
     <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   		 <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token string">&#39;createdTime&#39;</span><span class="token punctuation">,</span>
    	 <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token string">&#39;updatedTime&#39;</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> test <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">,</span>bookSchema<span class="token punctuation">)</span>


<span class="token comment">//可不写第二个回调函数，改用async await</span>
<span class="token comment">//新增</span>
test<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;西游记&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//删除一条</span>
test<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   
    <span class="token comment">//条件</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

model<span class="token punctuation">.</span><span class="token function">findByIdAndDelete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>

<span class="token comment">//删除多条</span>
test<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   
    <span class="token comment">//条件</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//更新一条</span>
test<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>条件<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>更新内容<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//更新多条</span>
test<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>条件<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>更新内容<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//读取一条</span>
test<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>条件<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//根据id查询</span>
test<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//读取多条,不传条件则是获取所有</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>条件<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">//======还可以这样修改</span>
<span class="token keyword">let</span> doc <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-02-26T16:37:48.244Z</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>updatedAt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022-02-26T16:37:48.244Z</span>

doc<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> doc<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//有时候查询到的结果，想直接doc.xxx进行修改，发现是修改不了的，需要调用.lean()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件控制" tabindex="-1"><a class="header-anchor" href="#条件控制" aria-hidden="true">#</a> 条件控制：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> bookSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">price</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> test <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">,</span>bookSchema<span class="token punctuation">)</span>

<span class="token comment">//运算符,在mongodb不能&gt; &lt; &gt;= &lt;= !==等运算符，需要使用替代符号</span>
<span class="token operator">&gt;</span>	使用	$gt
<span class="token operator">&lt;</span>	使用	$lt
<span class="token operator">&gt;=</span>	使用	$gte
<span class="token operator">&lt;=</span>	使用	$lte
<span class="token operator">!==</span>	使用	$ne

test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">$lt</span><span class="token operator">:</span><span class="token number">20</span>  <span class="token comment">//查询价格小于20的</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">//逻辑运算</span>
<span class="token comment">//或 $or</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">$or</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>条件<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>条件<span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//与 $and</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">$and</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>条件<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>条件<span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//正则</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">属性</span><span class="token operator">:</span>正则表达式 <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">//设置返回字段，需要返回的字段设置值为1</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">_id</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">//数据排序sort,升序1，降序-1</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">//数据截取，skip跳过，limit限定</span>
test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//取得就是第11~13条数据</span>

<span class="token comment">//统计总数</span>
test<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图形化管理工具" tabindex="-1"><a class="header-anchor" href="#图形化管理工具" aria-hidden="true">#</a> 图形化管理工具</h3><p>Robo 3T</p><p>Navicat</p><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h3><p>session是保存在服务器端的数据，保存当前访问用户的相关信息。</p><p>session运行流程：填写帐号和密码校验身份，校验通过后创建session信息，讲session_id的值通过cookie响应头返回给浏览器，下次请求时会自动携带cookie，取出session_id的值确定用户身份.</p><p>express中需要安装express-session对session进行操作(默认把信息存储在内存)、安装connect-mongo，将session信息存储在数据库中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i express-session connect-mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//app.js</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express-session&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MongoStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;connect-mongo&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//设置session中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;sid&#39;</span><span class="token punctuation">,</span>  <span class="token comment">//设置cookie的name，默认值是connect.sid</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span><span class="token string">&#39;signSecret&#39;</span><span class="token punctuation">,</span> <span class="token comment">//加密签名,加盐</span>
    <span class="token comment">// 强制将“未初始化”的会话保存到存储中。 当会话是新的但未被修改时，它是未初始化的。 选择 false 对于实现登录会话、减少服务器存储使用或遵守在设置 cookie 之前需要许可的法律很有用。 选择 false 还有助于解决客户端在没有会话的情况下发出多个并行请求的竞争条件。默认值为 true。(没看懂)</span>
    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//是否为每个请求都创建一个cookie用来存储session的id.为true时，无登录状态的信息也会创建存储</span>
    <span class="token literal-property property">resave</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否在每次请求时重新保存session(返回新sessionId)</span>
    <span class="token literal-property property">store</span><span class="token operator">:</span>MongoStore<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">mongoUrl</span><span class="token operator">:</span><span class="token string">&#39;mongodb://127.0.0.1:27017/test&#39;</span>  <span class="token comment">//数据库的连接配置</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cookie</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">httpOnly</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//开启后前端无法通过js操作</span>
        <span class="token literal-property property">maxAge</span><span class="token operator">:</span><span class="token number">300</span><span class="token operator">*</span><span class="token number">1000</span>    <span class="token comment">//设置sessionId的过期时间</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//index.js 路由文件</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
    	校验帐号密码
    */</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">&#39;xx&#39;</span>   <span class="token comment">//存储session信息</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>test<span class="token operator">=</span><span class="token string">&#39;yy&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//session的读取</span>
req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>xxx   <span class="token comment">//中间件已经直接从数据库中取出对应sid的session信息,存放到req.session中</span>

<span class="token comment">//session的销毁</span>
req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cookie与session对比：</p><ul><li>cookie存放在客户端，session存放在服务端。</li><li>cookie是明文存储，安全性低。session存放在服务器，安全性较好</li><li>cookie设置太多内容会增大报文体积，影响传输效率。session数据存放在服务器，只通过cookie传id，不影响传输效率</li><li>单个cookie保存数据不能超过4k，单个域名下的存储数量也有限。session没有限制</li></ul><h3 id="express-mongodb初始化项目" tabindex="-1"><a class="header-anchor" href="#express-mongodb初始化项目" aria-hidden="true">#</a> express+mongodb初始化项目</h3><p>安装express脚手架</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g express-generator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建项目</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>express blogBackEnd --view=ejs    
等价于
express blogBackEnd -e
//创建名为blogBackEnd的项目，并且模板引擎为ejs，默认为jade。不需要模板引擎改为   --no-view
//服务端只做数据响应的话，一般用ejs就行，如果不用模板引擎，就会在一些接口报错404之类的时候没有那么直观。

cd blogBackEnd
npm install
npm start //启动
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>热更新</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改package.json启动命令node--&gt;nodemon：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;scripts&quot;:{
	&quot;start&quot;:&quot;nodemon  ./bin/www&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置环境变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i cross-env -D
npm i dotenv -s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根目录下创建相应的环境变量文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//.env.development
NODE_ENV=development
PORT=8765

//.env.production
NODE_ENV=production
PORT=9999
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入口文件:/bin/www.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.env.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//文件中的变量便可通过p<wbr>rocess.env.xxx获取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改package.json启动命令:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=development nodemon ./bin/www &quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装mongoose</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i mongoose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建db/index.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>dbUrl<span class="token punctuation">)</span>
<span class="token doc-comment comment">/** 监听连接成功 */</span>
mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connected&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Mongoose connection open to &#39;</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>dbUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/** 监听连接异常 */</span>
mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Mongoose connection error:&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./db/index&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建models/user.js映射文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> Number
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由文件测试数据库查询</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> userModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../models/user&#39;</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token keyword">await</span> userModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ans&#39;</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&#39;success&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsonwebtoken" tabindex="-1"><a class="header-anchor" href="#jsonwebtoken" aria-hidden="true">#</a> jsonwebtoken</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i jsonwebtoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//使用</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jsonwebtoken&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;xx&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">//加密.第一个参数-加密的内容，第二个参数-密钥，第三个参数-一些配置属性</span>
<span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token string">&#39;abcde&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">expiresIn</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>   <span class="token comment">//过期时间,如果是数字则是秒，字符串则是毫秒。  </span>
    <span class="token comment">// 2 days =两天  </span>
    <span class="token comment">// 1d = 一天</span>
    <span class="token comment">// 10h = 10小时  m分、s秒、y年,可以为负数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//解密</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>verify<span class="token punctuation">,</span><span class="token string">&#39;abcde&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不要把隐私信息放进去加密，token是明文的js都可以直接破译token</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> token<span class="token operator">=</span><span class="token string">&#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsImlhdCI6MTY5MTkxMzY1NH0.kInkpSi9CdXH4ttttQY3ex_lfHCc5kkyUGo91mfZK30&#39;</span>   <span class="token comment">//经加密生成的token</span>

window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//生成json字符串</span>
<span class="token comment">//&#39;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;,&quot;iat&quot;:1691913654}&#39;   可以看到token字符串第二段被直接解码了</span>
window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token comment">//&#39;{&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jwt原理：jwt是一种基于 JSON 的数据对象，通过技术手段将数据对象签名为一个可以被验证和信任的令牌（Token）在客户端和服务端之间进行安全的传输。</p><p>JWT Token 由三部分组成：<strong>header</strong>（头信息）、<strong>payload</strong>（消息体）、<strong>signature</strong>（签名），之间用 . 链接</p><p><strong>Header</strong> 部分由 JSON 对象 { typ, alg } 两部分构成，使用 base64url(header) 算法转为字符串</p><p>alg：签名算法，默认为HS256</p><p>typ：表示令牌类型，JWT 令牌统一写为JWT</p><p><strong>Payload</strong> 部分为消息体，用来存储需要传输的数据，同样也是一个 JSON 对象使用base64url(payload) 算法转为字符串，JWT 提供了 7 个可选字段供选择，也可以自定义字段</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p><strong>Signature</strong> 是对 Header、Payload 两部分数据生成的base64字符串，加上一个密钥进行签名来变成第三部分</p><p>数据一旦被篡改，到服务端也会认证失败的，服务端在生成签名时有一个重要的参数是 secret，只要保证这个密钥不被泄漏，就算篡改也是无效的。</p><h3 id="时区问题" tabindex="-1"><a class="header-anchor" href="#时区问题" aria-hidden="true">#</a> 时区问题</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i mongoose-timezone --force
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timeZone <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose-timezone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> Schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">date</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>
    <span class="token literal-property property">subDocument</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">subDate</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// If no path is given, all date fields will be applied</span>
Schema<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>timeZone<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;subDocument.subDate&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Schema&#39;</span><span class="token punctuation">,</span> Schema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一开始是用 mongoose-timezone插件，后续发现一旦更新数据，updatedAt的数据还是少8个小时，所以还是要配置dayjs或moment.感觉可以不用mongoose-timezone，get、set都用时间插件处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mongoose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timeZone <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mongoose-timezone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dayjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;dayjs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> roleSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">rolesName</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;hour&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">versionKey</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

roleSchema<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>timeZone<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;updatedAt&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;roles&quot;</span><span class="token punctuation">,</span> roleSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后来发现只是数据库时间看着是本地的，但是前端通过new Date().toLocalString()一处理，就变成多8个小时，所以干脆后端这里不处理，返回的时间由前端处理就行。</p>`,108),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","mongodb.html.vue"]]);export{r as default};
