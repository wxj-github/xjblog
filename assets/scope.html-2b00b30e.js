import{_ as n,o as s,c as a,e as t}from"./app-6fcf50f1.js";const e={},p=t(`<h2 id="部分ui组件样式穿透无法生效" tabindex="-1"><a class="header-anchor" href="#部分ui组件样式穿透无法生效" aria-hidden="true">#</a> 部分UI组件样式穿透无法生效</h2><p>在el-popover里放了个取色器，当按下确定选取完颜色时，取色器闪现到左边并完成了它的关闭动画。所以想写样式把它动画关掉，但是发现无论如何也无法选中它的样式。这时就需要回顾到scoped和样式穿透的知识了。</p><p>scoped是为了使样式模块化，不对全局造成污染。style标签加上scoped属性的组件，编译后会以组件为单位给里面的元素dom属性都会添加data-v-xxx（随机哈希值）属性（子组件除外，只会给子组件的根节点添加data-v-xxx，这也是容易造成样式失效的原因），我们写的样式也会被拼接上这个唯一标识， div[data-v-xxx]，它代表有这个属性的div标签才会命中此样式，所以它不会污染到其他组件样式。而我们在使用第三方ui库的时候，</p><p>比如el-input（加上了类名test），会发现它生成的元素最外层是div（有data-v-xx且存在类名test），里层的input（并没有data-v-xx，并且它才是能让样式修改的位置），这时候写.test input{} 生成的是.test input[data-v-xx],所以是无法命中样式，这时候就需要样式穿透来解决这个问题.只要修改成.test ::v-deep intpu{},生成的就会变成.test[data-v-xxx] input{},样式就能命中，样式穿透正是通过改变哈希值的拼接位置来解决的。::v-deep写在哪里，vue就会把哈希值拼接在哪里</p><p>回到我们原本的问题，为什么我怎么穿透都无法命中呢？因为！！类似el-popover、el-color-picker等弹出组件，它生成的元素并不在该组件的层级之下（而是body下），所以写的样式不管你哈希值拼接在哪个位置都永远无法命中，其实组件库也考虑到了这一点，一般这种组件都会有个popper-class属性，让你可以给这个脱离组件的元素加上你的专属类名，这时再写一个不加scoped的style标签或用:global，把样式写在里面即可解决.</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">&lt;!-- 我起的bugForPicker，只要起的奇怪一些，也不容易污染其他样式--&gt;
.el-popper.is-light.el-color-picker__panel.el-color-dropdown.bugForPicker</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>scss<span class="token punctuation">&#39;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">:global(.el-popper.is-light.el-color-picker__panel.el-color-dropdown.bugForPicker)</span><span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
//======其实两种编译后的效果都是一样的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样式穿透写法：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>css:深度作用选择器 &gt;&gt;&gt;    (less,scss可能无法处理识别)
less: /deep/
scss: ::v-deep   |   :deep(.classname)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改ui组件库样式：先通过f12找到元素，再在里面修改样式，能生效再找对应的类名回到项目里进行编写。</p><p>在React中是使用Css module进行样式隔离的。</p><p>渲染后也是给原类名添加哈希后缀，.form ==&gt; .form___xxxx，类似这种格式，也可能有所不同，由构建工具决定。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">.top</span><span class="token punctuation">{</span> 
    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>
    <span class="token selector">.ant-form-inline .ant-form-item</span><span class="token punctuation">{</span>
        <span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//构建后,可以看到给类名后也添加了哈希后缀，而组件库渲染后的类名是ant-form-inline ant-form-item，所以无法命中样式，需要添加global进行穿透</span>
    <span class="token selector">.top___i8f8m .ant-form-inline___YuNYT .ant-form-item___3Efy7</span> <span class="token punctuation">{</span>
  		<span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  		<span class="token property">margin-bottom</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    
    <span class="token selector">:global(.ant-form-inline .ant-form-item)</span><span class="token punctuation">{</span>    
        <span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//构建后，加了global声明的没有添加哈希后缀</span>
    <span class="token selector">.top___i8f8m .ant-form-inline .ant-form-item</span> <span class="token punctuation">{</span>
  		<span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  		<span class="token property">margin-bottom</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.less&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>top<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   //假设是某UI库组件，渲染后组件类名含  .ant-form-inline .ant-form-item
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">//经过以上，那我们平时写代码的时候就可以用这种形式。</span>
<span class="token selector">.test</span><span class="token punctuation">{</span>
    <span class="token selector">.one</span><span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">:global</span><span class="token punctuation">{</span>
        <span class="token selector">.two</span><span class="token punctuation">{</span>
            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//就可以省略很多styles.xxx,直接用字符串</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>test<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>one<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">11</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>two<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">22</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么弹出类组件要挂载到body下" tabindex="-1"><a class="header-anchor" href="#为什么弹出类组件要挂载到body下" aria-hidden="true">#</a> 为什么弹出类组件要挂载到body下</h2><p><strong>避免布局问题：</strong> 如果模态框在DOM中的位置不是body下，而是相对于某个父元素，可能会出现布局问题。</p><p><strong>层级最高：</strong> 将模态框挂载到body下可以确保它在DOM层级上处于最顶层。这样可以避免其他元素的z-index（层级）值影响模态框的显示，确保模态框总是显示在页面的最上层。</p><h2 id="z-index如何互相影响" tabindex="-1"><a class="header-anchor" href="#z-index如何互相影响" aria-hidden="true">#</a> z-index如何互相影响？</h2>`,19),l=[p];function c(o,i){return s(),a("div",null,l)}const d=n(e,[["render",c],["__file","scope.html.vue"]]);export{d as default};
