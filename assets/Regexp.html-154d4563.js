import{_ as a,r as e,o as t,c as p,a as n,b as c,d as o,e as l}from"./app-c984cf19.js";const i={},r=n("p",null,"正则表达式是一个脱离语言的一套规范",-1),u=n("p",null,"是一个规则，用于验证字符串",-1),d={href:"https://www.jyshare.com/front-end/854/",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="特别字符和转义字符" tabindex="-1"><a class="header-anchor" href="#特别字符和转义字符" aria-hidden="true">#</a> 特别字符和转义字符</h2><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配<strong>除换行符\\n之外的任意字符</strong>，</td></tr><tr><td>^</td><td>匹配<strong>字符串的开始</strong>; 如^xx</td></tr><tr><td>$</td><td>匹配<strong>字符串的结束</strong>，也匹配\\n和\\r; 如xx$</td></tr></tbody></table><p>要匹配特殊字符本身都需要加转义符号\\</p><p>\\n 换行符</p><p>\\r 回车符</p><p>\\s 匹配空白字符，换行回车都算</p><p>\\S 匹配非空白字符</p><p>\\b 匹配单词边界，字符串的开始、结尾、空格都算是单词边界</p><p>\\B 匹配非单词边界</p><p>\\d 匹配一个数字字符，等价于[0-9]</p><p>\\D 匹配一个非数字字符</p><p>\\w 匹配一个字母、数字、下划线，等价于[A-Za-z0-9_]</p><p>\\W 匹配一个非字母、数字、下划线</p><p>\\un 匹配n，n是一个十六进制的Unicode编码</p><h2 id="字符集" tabindex="-1"><a class="header-anchor" href="#字符集" aria-hidden="true">#</a> 字符集</h2><p>通过[]包裹匹配范围，匹配<strong>一个字符</strong>，如[a-z]就是匹配一个任意小写字母，[abc]就是匹配a、b、c三个任意一个</p><p>用-连接表示unicode编码范围</p><p>[^字符范围]：如果在[]里使用了^表示该字符集取反</p><h3 id="匹配中文" tabindex="-1"><a class="header-anchor" href="#匹配中文" aria-hidden="true">#</a> 匹配中文</h3><p>[\\u4e00-\\u9fa5]</p><p>到9fef其实也有，不过是一些生僻字</p><h2 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h2><p>表示<strong>前面一个规则</strong>出现的次数</p><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任意次数，包括0次； \\d* 表示任意个数字</td></tr><tr><td>+</td><td>匹配1个或多个；\\d+表示一个或多个数字</td></tr><tr><td>?</td><td>匹配0个或1个；</td></tr><tr><td>{n}</td><td>匹配n个</td></tr><tr><td>{n,}</td><td>匹配&gt;=n个</td></tr><tr><td>{n,m}</td><td>匹配n-m个</td></tr></tbody></table><h2 id="或者" tabindex="-1"><a class="header-anchor" href="#或者" aria-hidden="true">#</a> 或者</h2><p>表示多个规则任选其一，用|连接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>  <span class="token comment">//表示匹配一个数字或字母</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="js中的应用" tabindex="-1"><a class="header-anchor" href="#js中的应用" aria-hidden="true">#</a> js中的应用</h2><p>js中，正则表达式表现为一个对象，该对象是通过构造函数RegExp创建的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\d&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//两种写法是等价的</span>

<span class="token keyword">let</span> reg3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>reg1<span class="token punctuation">)</span>   
<span class="token keyword">let</span> reg4 <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span>reg1<span class="token punctuation">)</span>   <span class="token comment">//这个和reg3创建出来的区别就是reg1和reg3地址不同，reg1和reg4地址相同</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标志位" tabindex="-1"><a class="header-anchor" href="#标志位" aria-hidden="true">#</a> 标志位</h3><p>g：全局匹配，找到所有匹配，而不是在第一个匹配后停止</p><p>i：忽略大小写</p><p>m：多行；分别匹配每一行的开始和结束，而不只匹配整个字符串的开始和末尾</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\d&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;gi&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验" tabindex="-1"><a class="header-anchor" href="#校验" aria-hidden="true">#</a> 校验</h3><h4 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token comment">//如果设置了全局匹配，那.test方法会有点不同</span>
reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//true,校验字符串是否满足这个正则，在索引0找到了1</span>
reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//true，它是从上一次的位置接着找，从索引1开始找，就找到了2</span>
reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//true，从索引2开始找，找到了3</span>
reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//false,索引3开始，没有找到，然后就复位了</span>
reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//true </span>

reg1<span class="token punctuation">.</span>lastIndex <span class="token comment">//会输出 下次匹配开始的字符串索引位置，这个值是可以手动更改的</span>

<span class="token comment">// 如果没有开始全局匹配，则每一次都是从0开始</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> exec</h4><p>执行匹配，得到匹配结果，也会受到lastIndex的影响</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;1234abc123aaa&#39;</span><span class="token punctuation">;</span>  
reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment">//返回结果是个数组，第一项就是匹配到的内容：1234，还有个index属性，表示匹配到的内容的起始索引</span>
reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment">// 123 index:7</span>
reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment">// 匹配不到null，复位</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="贪婪模式" tabindex="-1"><a class="header-anchor" href="#贪婪模式" aria-hidden="true">#</a> 贪婪模式</h3><p>正则表达式默认为贪婪模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>   <span class="token comment">//匹配一次或多次数字</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;1234abc123aaa&#39;</span><span class="token punctuation">;</span>   
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>  <span class="token comment">// 0 true 4，表示它匹配了1234，而不是1或12或123，表示它是尽可能多的匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>  <span class="token comment">// 4 true 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>  <span class="token comment">// 10 false 0</span>

<span class="token comment">//在量词后面加一个?表示非贪婪模式</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>   <span class="token comment">//匹配一次或多次数字</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;1234abc123aaa&#39;</span><span class="token punctuation">;</span>   
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>  <span class="token comment">// 0 true 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>  <span class="token comment">// 1 true 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>  <span class="token comment">// 2 true 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串对象中的正则方法" tabindex="-1"><a class="header-anchor" href="#字符串对象中的正则方法" aria-hidden="true">#</a> 字符串对象中的正则方法</h3><h4 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h4><p>匹配一个正则表达式，返回匹配结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;1234abc123aaa&#39;</span><span class="token punctuation">;</span>  
s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>  <span class="token comment">// [1234,123]  如果不是全局匹配，则返回结果的形式和exec一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search</h4><p>永远返回第一个匹配的下标</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;1234abc123aaa&#39;</span><span class="token punctuation">;</span>  
s<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>  <span class="token comment">//0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split</h3><p>按正则匹配分隔</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;123,456-789&#39;</span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[,-]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>  
s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>  <span class="token comment">// [&#39;123&#39;, &#39;456&#39;, &#39;789&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h3><p>替换字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;123,456-789&#39;</span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[,-]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//&#39;123!456!789&#39;</span>

<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>  <span class="token comment">//把单词首字母变大写</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//后面的参数是捕获组</span>
    <span class="token keyword">return</span> match<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;$1-$2-$3&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// $1表示第一个捕获组，以此类推，捕获组概念见进阶部分</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><h3 id="捕获组" tabindex="-1"><a class="header-anchor" href="#捕获组" aria-hidden="true">#</a> 捕获组</h3><p>用小括号包裹的部分叫做捕获组，捕获组会出现在匹配结果中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d[a-z])([a-z]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&#39;2fsdf-5fdgdfg-9asddf&#39;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
	[&#39;2fsdf&#39;, &#39;2f&#39;, &#39;sdf&#39;] index: 0   第一项表示正则匹配到的整个结果，第二项则是第一个捕获组所匹配到的内容，第三个则是第二个捕获组的捕获结果
	[&#39;5fdgdfg&#39;, &#39;5f&#39;, &#39;dgdfg&#39;]  index: 6
	[&#39;9asddf&#39;, &#39;9a&#39;, &#39;sddf&#39;]  index:14
*/</span>


<span class="token comment">//捕获组只保留最后一次匹配的内容</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z])+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;asd-wer-qwe&#39;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
	[&#39;asd&#39;,&#39;d&#39;]     asd是符合整个正则的，a、s、d都分别符合捕获组([a-z]),但只保留了最后一个
	[&#39;wer&#39;,&#39;r&#39;]
	[&#39;qwe&#39;,&#39;e&#39;]
*/</span>



<span class="token comment">//应用：得到一个日期，并得到每个日期的年月日</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;2015-5-1,2019-6-19,2020-04-28&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{1,2})-(\\d{1,2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//给捕获组命名  ?&lt;name&gt;</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;2015-5-1,2019-6-19,2020-04-28&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{1,2})-(?&lt;day&gt;\\d{1,2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">)</span>  <span class="token comment">//在结果的groups里就有含有year、month、day键值对的对象</span>
<span class="token punctuation">}</span>

<span class="token comment">//设定非捕获组，   ?:</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;2015-5-1,2019-6-19,2020-04-28&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:\\d{4})-(?:\\d{1,2})-(?&lt;day&gt;\\d{1,2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">//如果day那里也设置了？：，那能匹配到的结果数组里就只有第一项了</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h3><p>在正则表达式中，使用某个捕获组，<code>\\捕获组编号</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{2})\\1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;1313&#39;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">//true</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;1345&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false ,前面是13，后面也必须是13</span>

<span class="token comment">//找出字符串中连续的字符</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;aaaabbbbccccdefgggg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> reg<span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token comment">// 等价 let reg= /(?&lt;test&gt;\\w)\\k&lt;test&gt;+/g;   引用的时候也使用\\1也可以</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正向断言-预查" tabindex="-1"><a class="header-anchor" href="#正向断言-预查" aria-hidden="true">#</a> 正向断言（预查）</h3><p>检查某个字符后面的字符是否满足某个规则，该<strong>规则不成为匹配结果，并且不成为捕获组</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;sdf265weq665rgdf888&#39;</span>  <span class="token comment">//要获取一个字母，它的后面要有数字,比如f后是2，q后是6，f后是8</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z](?=\\d+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>   <span class="token comment">// f q f并没有把后面的数字形成匹配结果</span>
<span class="token punctuation">}</span>

<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">------</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;33456789&#39;</span>
<span class="token comment">// 要得出结果：33，456，789</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  
s<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token comment">/*
	(\\d{3})+$ 意思是以3的倍数个数字结尾，3，6，9
	\\B是匹配非单词边界，因为当是 &#39;334&#39;这种刚好是3倍数的情况，不加就会出现,334
*/</span> 


<span class="token comment">// 判断密码强度,要求密码中必须出现小写字母，大写字母，数字，特殊字符（!@_）</span>
<span class="token keyword">let</span> reg<span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@_]).{6,12}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> 
<span class="token comment">// .*[a-z]就表示了任意字符（包括空）后面是否有小写字母，最后匹配任意字符6~12个</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;sfw1&#39;</span><span class="token punctuation">)</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;sfw1!W&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="负向断言-预查" tabindex="-1"><a class="header-anchor" href="#负向断言-预查" aria-hidden="true">#</a> 负向断言（预查）</h3><p>检查某个字符后面的字符是否<strong>不满足某个规则</strong>，该<strong>规则不成为匹配结果，并且不成为捕获组</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span><span class="token string">&#39;asd123qwe456dfg123&#39;</span>  <span class="token comment">//要求匹配后面没数字的字母</span>
<span class="token keyword">let</span> reg<span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z](?!\\d+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>   <span class="token comment">// a s q w d f</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function g(v,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[r,u,n("p",null,[n("a",d,[c("在线测试"),o(s)])]),k])}const x=a(i,[["render",g],["__file","Regexp.html.vue"]]);export{x as default};
